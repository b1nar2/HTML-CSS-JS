<?xml version="1.0" encoding="UTF-8"?>
<Configuration>

	<!-- 
	
	######## log4j pattern(패턴) ##########
	 
	%p : 로그 레벨(debug, info, warn, error, fatal)의 priority(디버깅시 출력 우선권)가 출력됨.
	%m : 로그 내용이 출력.
	%d : 로그 이벤트가 발생한 시간을 기록.
	  ex) %d{HH:mm:ss, SSS}, %d{yyyy MMM dd HH:mm:ss, SSS}
	  : Java의 SimpleDateFormat의 클래스에 따른 포맷(format) 적용
	  
		- %d{ABSOLUTE}
		- %d{DATE}
		- %d{ISO8601}

	%t : 로그 이벤트가 발생된 스레드(thread)명을 출력.
	%% : % 표시 출력.
	%n : 플랫폼 종속적인 개행문자(줄바꿈)가 출력.
	%c : 카테고리(category)를 표시.
	 ex) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력.
	 
	%C : 클래스명(class)을 표시. 
	 ex) 만약 클래스의 패키지 구조가 com.javateam.project.DemoClass 라고 한다면  
	     %C{2}는 project.DemoClass 가 출력됨.
	 
	%F : 로그가 발생한 프로그램 파일(File)명.
	%l : 로그가 발생한 호출자(caller)의 정보.
	%L : 로그가 발생한 호출자(caller)의 라인수(line)를 나타냅니다
	%M : 로그가 발생한 메서드(method) 이름을 나타냅니다.
	%r : 프로그램 시작 이후 부터 로그가 발생한 시점의 시간(milliseconds : 밀리초)
	%x : 로그가 발생한 스레드(thread)와 관련된 NDC(nested diagnostic context)를 출력.
	%X : 로그가 발생한 스레드(thread)와 관련된 MDC(mapped diagnostic context)를 출력. %X{key} 형태.
	
	참고) NDC & MDC : https://cwiki.apache.org/confluence/display/LOGGINGLOG4J/NDCvsMDC
		
	- 공백(whitespace) 패딩 관련
	%5p : 우측 정렬로 로그 레벨을 남김. 로그 레벨이 5글자가 안되면 왼쪽에 공백을 추가하여 5글자 맞춤.
	%-5p : 좌측 정렬. 

	-->
	
	<Properties>
		
		<!-- <Property name="LOG_PATH" value="로그 경로" /> -->
		<Property name="LOG_PATH" value="E:/students/lsh/log/demoGradle/log4j2_prop" />
		
		<Property name="layoutPattern">
			%-5p: %-50C{50} ==> %m : [%d{yyyy-MM-dd HH:mm:ss.SSS}]%n%n
		</Property>
	</Properties>
	
	<Appenders>
	
		<Console name="LogToConsole" target="SYSTEM_OUT">
			<PatternLayout pattern="${layoutPattern}" />
		</Console>
		
		<RollingFile name="LogToRollingFile" 
		 			 fileName="${LOG_PATH}/log4j2.log" 
		 			 filePattern="${LOG_PATH}/${date:yyyy-MM-dd}/lab_%d{MM-dd-yyyy}-%i.log">
		 			  
            <PatternLayout pattern="${layoutPattern}"/>
            
            <Policies>
                <SizeBasedTriggeringPolicy size="10KB"/>
                <TimeBasedTriggeringPolicy interval="1"/>
            </Policies>
            
            <DefaultRolloverStrategy max="1000" fileIndex="min"/>
            
        </RollingFile>
        
	</Appenders>
	
		
	<Loggers>
	
		<!-- <Logger name="com.javateam.프로젝트 context Path" --> 
		<Logger name="com.javateam.demoGradle"
				level="INFO" 
				additivity="false">
			<AppenderRef ref="LogToConsole"/> 
			<AppenderRef ref="LogToRollingFile"/>
		</Logger>
		
		<!-- 
			필요시 프로젝트에서 사용하고 있는 라이브러리에 Logger도 등록할 수 있습니다. 
			물론 이 부분은 XML이 아닌 application.properties에 아래와 같이 작성할 수 있습니다.
		     
		    ex) logging.level.org.springframework=info
    	 -->
		<Logger name="org.springframework"
				level="INFO" 
				additivity="false">
			<AppenderRef ref="LogToConsole"/>
			<AppenderRef ref="LogToRollingFile"/>
		</Logger>
				
		<Root level="INFO" additivity="false">
			<AppenderRef ref="LogToConsole" />
			<AppenderRef ref="LogToRollingFile"/>
		</Root>
		
	</Loggers>
	
</Configuration>